import { Telegraf } from "telegraf";
import dotenv from "dotenv";
import { message } from "telegraf/filters";
import { session } from "telegraf";
import * as cron from 'cron';
import { CronJob } from 'cron';
import ngrok from 'ngrok';
import mongoose from "mongoose";
import express from "express"
import { UserSubscriptionForecast } from "./models/userSheme";


dotenv.config();


// === –ó–ú–Ü–ù–ù–Ü –ó –û–¢–û–ß–ï–ù–ù–Ø ===
const token = process.env.TELEGRAM_BOT_TOKEN;
const ngrokToken = process.env.NGROK_TOKEN;
const URI = process.env.MONGO_DB_URI
const port = Number(process.env.PORT) || 3000;
const enabledSubscription = true;

// === CONNECT TO MONGO BD ===
try {
  await mongoose.connect(URI);
} catch (error) {
  handleError(error);
}



// === CONNECT TO NGROK ===
await ngrok.authtoken(ngrokToken);
const url = await ngrok.connect({addr: 3000});

console.log("‚úÖ NGROK –∑–∞–ø—É—â–µ–Ω–æ:", url);
console.log("‚úÖ token:", token.slice(0, 10) + "...");
console.log("‚úÖ port:", port);

// === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê ===
const bot = new Telegraf(token);

await bot.telegram.setWebhook(`${url}/webhook`);

if (!token) {
  console.error("Error : TELEGRAM_BOT_TOKEN –∞–±–æ WEB_HOOK_URL don't set!");
  process.exit(1);
}

bot.use(session({
    defaultSession: () => ({
      step: null,
      name: null
    })
  }));

// === –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ===
bot.command("start", (ctx) => {
    ctx.session.step = "wait_name";
    ctx.reply(`Hello, I‚Äôm forecasting weather-bot! My name is Weathy!

I can send you weather updates anytime you want ‚Äî it‚Äôs awesome, isn‚Äôt it?

Please type /time to set time when I can send you forecast update. I‚Äôll guide you through all the settings!`);
});

bot.command("time", (ctx) => {
    ctx.session.step = "wait time"
    ctx.reply("–•–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ç–æ—á–Ω–∏–π —á–∞—Å? –ù–∞–ø–∏—à–∏ –±—É–¥—å-—â–æ, —ñ —è –π–æ–≥–æ –≤–∏–≤–µ–¥—É.");
    console.log(ctx.message.text)
})

bot.on(message("text"), (ctx)=>{
    if (ctx.session.step === "wait time") {
        const user_chat_id = ctx.chat.id
        const user_msg = ctx.message.text


        const userSubscription  = new UserSubscriptionForecast({
          chatId: ctx.chat.id,
          userTime: ctx.message.text,
          enabled: enabledSubscription
        })

        userSubscription.save()
          .then(() => console.log('User created'))
          .catch((err) => console.log(err));

        const [hh, mm] = user_msg.split(':')
        const validation = cron.validateCronExpression(`0 ${mm} ${hh} * * *`);

        console.log("–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è cron:", `0 ${mm} ${hh} * * *`); 
        console.log(`Is the cron expression valid? ${validation.valid}`);

        if (!validation.valid) {
	        console.error(`Validation error: ${validation.error}`);
        } else {
            const job = CronJob.from({
            cronTime: `*/10 * * * * *`,
            onTick: () =>  {
              console.log("OnTick triggered");
              bot.telegram.sendMessage(user_chat_id, `You will see this on ${hh}: ${mm}`);
            },
            start: true,
            timeZone: 'Europe/Kyiv'
        });
        }

        ctx.session.step = null;
        return;
    }

    ctx.reply("–ù–∞–ø–∏—à–∏ /start –∞–±–æ /time");
})



await new Promise((res) => setTimeout(res, 1000));

// === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
bot.launch({
  webhook: {
    domain: url.replace(/^https?:\/\//, ''),
    port: port,
    hookPath: "/webhook"
  }
}).then(() => {
  console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ webhook!");
}).catch((err) => {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:", err);
});
